-------------------------------------------------------
--  Exercise 16.4 - Programming in Haskell - Hutton  --
-------------------------------------------------------

-- (a) xs ++ [] = xs
--
-- Proof: By induction on the length of xs.
-- Base case:
-- [] ++ []     = {applying ++} []
--
-- Inductive case:
-- (x:xs) ++ [] = {applying ++} x : (xs ++ [])
--              = {induction hypothesis} x : xs                             []
--
--
-- (b) xs ++ (ys ++ zs) = (xs ++ ys) ++ zs              
--
-- Proof: By induction on the length of xs.
-- Base case:
-- [] ++ (ys ++ zs)     = {applying ++} (ys ++ zs)
--                      = {unapplying ++} (([] ++ ys) ++ zs)
-- Inductive case:
-- (x:xs) ++ (ys ++ zs) = {applying ++} x : (xs ++ (ys ++ zs))
--                      = {induction hypothesis} x : ((xs ++ ys) ++ zs)
--                      = {unapplying ++} (x : (xs ++ ys)) ++ zs
--                      = {unapplying ++} ((x:xs) ++ ys) ++ zs              []
